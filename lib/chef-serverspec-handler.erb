require 'spec_helper'

describe '<%= cookbook %>::<%= recipe %>' do
<%- resources.each do |resource| -%>
  <%-
    if [
      Chef::Resource::File, 
      Chef::Resource::CookbookFile,
      Chef::Resource::RemoteFile,
      Chef::Resource::Directory,
      Chef::Resource::RemoteDirectory,
      Chef::Resource::Template
    ].include?(resource.class)
  -%>
  context file('<%= resource.path %>') do
    it { should be_file }
    <%- if resource.respond_to?(:content) && resource.content -%>
    it { should contain <<-EOF
<%= resource.content %>
    EOF
    }
    <%- end -%>
    <%- if resource.mode -%>
    it { should be_mode <%= resource.mode.to_i %> }
    <%- end -%>
    <%- if resource.owner -%>
    it { should be_owned_by '<%= resource.owner %>' }
    <%- end -%>
    <%- if resource.group -%>
    it { should be_group_into '<%= resource.group %>' }
    <%- end -%>
    <%- if resource.respond_to?(:variables) && resource.variables && resource.variables.values.size > 0 %>
      <%- resource.variables.each_value do |value| -%>
    it { should contain '<%= value %>' }
      <%- end -%>
    <%- end -%>
  end
  <%-
    elsif [
      Chef::Resource::Package,
      Chef::Resource::AptPackage,
      Chef::Resource::DpkgPackage,
      Chef::Resource::YumPackage,
      Chef::Resource::RpmPackage
    ].include?(resource.class)
  -%>
  context package('<%= resource.name %>') do
    it { should be_installed }
  end
  <%- elsif resource.class == Chef::Resource::Mount -%>
  context file('/') do
    it {
      should be_mounted_with(
      )
    }
   end
  <%- elsif resource.class == Chef::Resource::Link -%>
  context file('<%= resource.target_file %>') do
    it { should be_linked_to '<%= resource.to %>' } 
  end
  <%- elsif resource.class == Chef::Resource::User -%>
  context user('<%= resource.username %>') do
    it { should exist }
  end
  <%- elsif resource.class == Chef::Resource::Group -%>
  context group('<%= resource.group_name %>') do
    it { should exist }
  end
  <%- elsif resource.class == Chef::Resource::Service -%>
  context service('<%= resource.service_name %>') do
    <%- if regular_actions(resource).include?(:enable) -%>
    it { should be_enabled }
    <%- elsif regular_actions(resource).include?(:start) -%>
    it { should be_running }
    <%- end -%>
  end
  <%- elsif resource.class == Chef::Resource::Cron -%>
  context cron do
    it { should have_entry('').with_user('mizzy') }
  end
  <%- end -%>

<%- end -%>
end

